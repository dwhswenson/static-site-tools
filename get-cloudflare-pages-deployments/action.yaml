name: "Get Cloudflare Deployments"

inputs:
  CLOUDFLARE_API_TOKEN:
    description: 'Cloudflare API token (from secrets)'
    required: true
  CLOUDFLARE_ACCOUNT_ID:
    description: 'Cloudflare account ID (from secrets)'
    required: true
  CLOUDFLARE_PROJECT_NAME:
    description: 'Cloudflare Pages project name (from repo variables)'
    required: true
  branch_name:
    description: 'Branch to check'
    required: true

outputs:
  deployments:
    description: 'List of deployments'
    value: ${{ steps.get_deployments.outputs.deployments }}

runs:
  using: 'composite'
  steps:
    - name: Get deployments
      id: get_deployments
      shell: python
      env:
        CLOUDFLARE_API_TOKEN: ${{ inputs.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_PROJECT_NAME: ${{ inputs.CLOUDFLARE_PROJECT_NAME }}
        BRANCH_NAME: ${{ inputs.branch_name }}
      run: |
        import os
        import json
        import urllib.request

        def get_branch(deployment):
            return deployment['deployment_trigger']['metadata']['branch']

        def process_deployment(deployment):
            return {
                'id': deployment['id'],
                'date': deployment['modified_on'],
                'branch': get_branch(deployment),
            }

        def process_page(data, branch=None):
            for deployment in data['result']:
                if branch:
                    if get_branch(deployment) == branch:
                        yield process_deployment(deployment)
                else:
                    yield process_deployment(deployment)

        def get_deployments(account, project, token, branch=None):
            print("Fetching deployments for branch:", branch)
            base_url = (
                f"https://api.cloudflare.com/client/v4/accounts/{account}"
                f"/pages/projects/{project}/deployments"
            )
            headers = {
                'Authorization': f'Bearer {token}',
                'Content-Type': 'application/json'
            }
            page = pages = 1  # get actual number of pages in loop
            deployments = []

            while page <= pages:
                url = base_url + f"?page={page}"
                print(f"Fetching URL {url}")
                req = urllib.request.Request(url, headers=headers)
                with urllib.request.urlopen(req) as resp:
                    body = resp.read()

                data = json.loads(body)
                deployments.extend(process_page(data, branch))
                pages = data['result_info']['total_pages']
                page += 1

            return deployments

        deployments = get_deployments(
            account=os.getenv("CLOUDFLARE_ACCOUNT_ID"),
            project=os.getenv("CLOUDFLARE_PROJECT_NAME"),
            token=os.getenv("CLOUDFLARE_API_TOKEN"),
            branch=os.getenv("BRANCH_NAME"),
        )
        print(json.dumps(deployments, indent=2))
        with open(os.getenv("GITHUB_OUTPUT"), "a") as f:
            f.write(f"deployments={json.dumps(deployments)}\n")

